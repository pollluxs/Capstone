The data was drawn from the https://www.pro-football-reference.com/ website. There the weekly passing statistics csvs were downloaded into a single file which is available in the github repository. I then loaded the data by cocncating each file into one large dataframe. This dataframe contains weeks 1 through 17 for years 2013 until 2016 and then weeks 1 through 14 for the 2017 season. I was able to build the dataset using pandas to read in each csv then concating the dataset in order.  When intially downloading the dataset the csvs were labeled to be read in chronologically. Since they were labeled and read in chronologically the index can be reset to hold the chronological order. 

Once the dataframe was created I then renamed many of the variables to make for easier identification for variable selection.  The labels given to the variables were given for ease of identification, and is not a necessary step to the process. 

I then moved on to feature engineering. The data set contained a date variable containing the year, month, and day of the game being played. This was then used to generate a month and year column by splitting on the "-" and reassigning the corresponding columns. Both of these columns are then transformed into 'int' columns.

A dummy column for being the home team was generated one with a categorical label home or away, and then from this a binary column was made with the home team being given the 1 value. This was done using mapping on the "Unnamed: 6" variable.

An actual fantasy points column was generated to compare with predicted fantasy points. For these projections it is assumed that the only things that go into Quarterback fantasy projections are passing yards, touchdowns, and interceptions.  The scoring was as follows; 25 passing yards for 1 point, 1 touch down 6 pts, and 1 interception -2 pts. To generate the actual fantasy points column each one of these stats columns was manipulated based on how they were scored then summed together. This created a final column for actual fantasy point scored.

Since the projections for each Quarterback are based of the current year they are playing the model is set up in a way that if a Quarterback is in multiple years each year they play they are considered a different Quarterback for modeling purposes.  The "Unnamed: 1" variable and the generated year varible were used in a for loop to generate the the "QB_ID" variable which used part of the name variable and the year to label all the Quarterbacks by thier name beginning with the year.

Once these variables were generated the irrelevant and redundant features were dropped from the dataset. Then the dataset was trimmed to be only players that had made at least 10 passing attempts. This was done to take out non-quarteback that may have been in the dataframe due to trick plays or the like.  

Since time series modeling will be used the next step is to check for stationarity in the data, to decide if differencing is necessary before generating a autoregressive model. Each of the 3 variables the go into the fantasy score are going to be predicted so each needs to be checked for stationarity.  This check is done by doing a augemented Dickey Fuller test.  Each of the variables had a T-statistic well past even the 1% critical values showing that stationarity is not an issue with these variables.

Once this check was done the modeling process can begin since differencing was not needed.  Firstly each variable, 'Passing_Yards', 'TD', 'Int' is used in a simple linear regression as the target variable, with the predictors being 'Cmp%', 'Sack', 'Completions', 'Attempts','Sack_Yards', 'QBR'. If the variable is not being predicted than it is also included in the list of predictor variables i.e. 'TD', and 'Int' are used to predict 'Passing_Yards'.  Each linear regression model is fit to the entire dataframe from 2013 to 2017.  Using this fitted model predictions for 'Passing_Yards', 'TD', and 'Int' are made. These are then differenced with the actual values of these variables to generate residuals. The residuals are then used to fit the ARMA model for each of the target variables.  This creates a ARMA model that is fit to the entire dataframe in order to predict out of the sample.

Once the models are created for each of the target variables, the functions were generated to make out of sample predictions for each of the of the target variables. Each of the functions takes in the the models generated for the perspective target variable as well as the whole dataframe, the desired week predicted, and Quarterback desired. The same varibles that were used to generate the linear and ARMA models are now used again to predict the out of sample residuals of the target variables.  

For each of the functions a temporary dataframe is created from the master dataframe and the Quarterback ID given. The dataframe is then sorted by the column 'G#' which numbers each game played, once this is done the index is reset to match the sorted dataframe. Using the week given the function slices the dataframe to only the weeks prior to the week given are used in the dataframe.  The linear regression model fit to the entire dataframe is then used to predict the the target variable of the temporary dataframe.  Using these predictions new residuals can be created, similar to generating the models these residuals are then used to make future predictions by passing the residual prediction into the ARMA model that was originally fit to the entire dataset.  This then generates an out of sample prediction. Doing this for all three of the target variables and then transforming the predictions into fantasy points and summing them together to make the fantasy point projections.

Due to the nature football, many of the quarterbacks do not start every week. This created an issue when the quarterback had not started every week of the season.  This is something that I would later address to streamline getting predictions in the future.  For now the predictions can be made individually. The actually fantasy point projections were created using a function calculator that used the out of sample functions, with a quarterback and week input to generate the fantasy points projections.

For the Quarterbacks that were predicted there was a root mean squared error generated of approximately 9.35 fantasy points. This shows that there is clearly room for improvement in the model, as the projections were off on average by over 9 points.

For the ARMA models there was a 2, 1 format with 2 autoregressive terms being used and one moving average term.  This was done for simplicity and flexibility of the model, since many of the quarterbacks dont have a large amount of data, as well as this allows predictions to begin at week 3. 

The model has many limitations and is very basic. In the future I would like to include stats for all relevant fantasy statistics as well as expanding the dataframe to all scoring players. I would also make the function more flexible so it can handle issues when the temporary dataframes of the Quarterbacks are different shapes. I also would adjust the dataframe to make projections for Quarterbacks that have limited sample or have not started yet but are going to.  

There are other features I would include; a "Sanders" variable identifying whether the game took place in primetime. A defensive variable that used weighting based defensive statistics that impacted Quarterback stats. I would also include a rival variable to indicate games that are between division rivals. Another possible future variable would be including a metric for weather conditions.

The model overall needs an expanded dataframe as well as additional variables for the other football statistics.  Since stats of the game are interconnected using more stats should result in a better model.  In the future I would like to use multivariate time series to make the predictions.




